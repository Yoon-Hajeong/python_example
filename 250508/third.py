# # insert

# a = [1, 2, 3, 4, 5]  # 이 끝에 6을 넣고 싶다면, append가 적합하다
# # insert 는 중간에 끼어들어가는 것
# # INSERT(인덱스, 값)
# a.insert(0, 0)  # 0번째에 0을 넣는다.
# print(a)
# # [1,2,3]에 0번째에 0을 넣으면 하나씩 밀리게 됨(쉬프트라고 함)
# # ***시간복잡도라는 개념도 나옴 . 중요
# # 리스트 1억개가 있을때, 0번째 위치에 0을 넣는다면, 1부터 1억까지 하나씩 다 밀리게 됨
# # 이렇게 되면 비용이 많이 든다.
# # 1-5천까지 있을 때, 2500위치에 1을 집어넣는다? 2499까지는 변동이 없음. 2500부터는 쉬프트가 일어남.
# # 하지만 append는 밀리지 않음. 그냥 끝에만 추가하는 것.

# # POP : Last in first out :마지막으로 들어간 것, 끝에 있는 것을 뺀다.
# a.pop()  # but, 이렇게 하면 뽑기만 하고 저장을 하지 않음, 추출한 5값을 사용하기 위해서는? 변수를 이용하기
# b = a.pop()  # 이렇게 하면 저장이 됨
# print(a)
# # 리스트가 비어있다면? IndexErrorpop from empty list
# #어떻게 조합해야 방지할 수 있을까?
# #만약 리스트가 비어있지 않니?를 어떻게 표현할까? = 리스트 안에 있는 데이터의 개수가 ~~
# if len(a) >= 1: #리스트 내부 데이터 갯수가 1개 이상이라면
#     a.pop() #추출
# else:
#     print("리스트가 비어있스빈다.")

# #remove(값)
# c = [1,2,3,1,1]
# c.remove(1)
# print(c) #왼쪽에 있는 값을 지움
# #인서트 할 때 쉬프트 일어나듯, 리무브도 쉬프트 일어난다.(뒤에 있는값들이 하나씩 앞으로 들어감)
# c.remove(1)
# print(c)
# c.remove(1)
# print(c)

# '''기존에 데이터가 있는 리스트를 만든다.
# insert를 활용해서 데이터를 넣는다.
# pop을 사용하여 꺼낸 데이터를 출력한다.
# remove를 사용하여 특정 데이터를 제거해본다.'''

# reverse
# a = [1,2,3,4,5]
# b = a.reverse()
# b = a.reverse() #리버스 자체는 변수에 담에도 아무것도 없음. [5,4,3,2,1]이 아니라는 것.
# a.reverse()해야 하지만, 그렇게 되면 원본이 훼손됨
# none 타입은 변수에 담을 수 없음. 행위는 하지만, 그걸 변수에 담아내지는 못함
# reverse vs reversed : 원본 데이터를 훼손하지 않고 복사한다. 단, 순서를 바꾸면서 숫자 데이터를 변수에 넣는다.


# a = [1,2,3,4,5]
# #print(reversed(a)) #파이썬에서 기본으로 제공하는 내장 함수
# #오류가 뜸. 형변환 해야 함.
# b = list(reversed(a)) #괄호는 안에서붕터 하나씩
# print(a)
# print(b)

"""
#sort sorted
a = [5,4,3,2,1]
#일반적인 상황에서는 오름차순
#a.sort() 로 하면 프린트 했을 때 [1,2,3,4,5] 잘 나옴, 하지만 원본데이터 훼손됨
b = list(sorted(a)) #꼭 리스트로 감싸주는거 필요함!
print(a)
print(b)
"""

# 내림차순은??
c = [1, 2, 3, 4, 5]  # sorted(리스트, reversed=bool)
sorted(c, reverse=False)  # sorted(a)
d = list(sorted(c, reverse=True))  # 내림차순 정렬
print(d)

# 문제
"""
문제
당신은 작은 도서관의 책 관리 시스템을 개발하고 있습니다. 다음 단계에 따라 리스트를 활용한 책 관리 시스템을 구현해보세요.

1단계: 초기 도서 목록 생성하기
books 리스트에 다음 5권의 책을 추가하세요: "파이썬 기초", "데이터 과학 입문", "알고리즘의 이해", "머신러닝 실전", "파이썬 기초"
books 리스트를 출력하세요.

2단계: 책 목록 관리하기
목록에서 "파이썬 기초"가 몇 권 있는지 확인하세요.
"웹 개발의 시작"이라는 책을 목록 끝에 추가하세요.
"데이터베이스 설계"라는 책을 3번째 위치에 삽입하세요.
새로운 책 리스트 new_books를 만들고 ["인공지능 개론", "클라우드 컴퓨팅"]을 포함시킨 후, books 리스트에 추가하세요.
수정된 books 리스트를 출력하세요.

3단계: 책 제거 및 관리하기
목록에서 첫 번째로 등장하는 "파이썬 기초"를 제거하세요.
리스트의 마지막 책을 빼내어 변수 last_book에 저장하고, 이 책을 출력하세요.
책 목록을 알파벳 순으로 정렬하세요.
정렬된 목록을 역순으로 뒤집으세요.
수정된 books 리스트를 출력하세요.

4단계: 도서 목록 분석하기
슬라이싱을 사용하여 books 리스트의 처음 3권을 top_books라는 새 리스트에 저장하세요.
books 리스트에서 2번째부터 5번째까지의 책들을 역순으로 reversed_selection이라는 새 리스트에 저장하세요.
top_books와 reversed_selection을 출력하세요.
books 리스트를 완전히 비우고 출력하세요.
"""

# #알파벳 정렬
# books.sort()
# books.reverse()

# 해설
# 1단계 해설:
# # 초기 도서 목록 생성
# books = ["파이썬 기초", "데이터 과학 입문", "알고리즘의 이해", "머신러닝 실전", "파이썬 기초"]
# print(books)

# 리스트는 파이썬에서 여러 항목을 담을 수 있는 가변적이고 순서가 있는 자료형입니다. 이는 실제 도서관에서 책 목록을 관리하는 것과 유사합니다. 각 책은 리스트의, 각 요소에 저장되며 순서대로 접근할 수 있습니다. 이처럼 리스트는 한 종류의 데이터를 모아서 관리할 때 사용합니다.

# 2단계 해설:
# # "파이썬 기초"가 몇 권 있는지 확인
# python_count = books.count("파이썬 기초")
# print(f"'파이썬 기초' 책은 {python_count}권 있습니다.")

# # 책 목록에 새로운 책 추가
# books.append("웹 개발의 시작")
# print("책 추가 후:", books)

# # 특정 위치에 책 삽입
# books.insert(2, "데이터베이스 설계")
# print("책 삽입 후:", books)

# # 여러 책을 한번에 추가
# new_books = ["인공지능 개론", "클라우드 컴퓨팅"]
# books.extend(new_books)
# print("여러 책 추가 후:", books)


# 여기서 count() 메서드는 특정 값이 리스트에 몇 번 포함되어 있는지 카운트합니다. 실제 도서관에서 특정 책이 몇 권 있는지 파악하는 것과 같습니다.

# append() 메서드는 리스트의 끝에 값을 추가합니다. 마치 도서관 서가의 맨 끝에 새 책을 꽂는 것과 같습니다.

# insert() 메서드는 주어진 위치에 값을 삽입합니다. 도서관에서 정해진 위치에 새 책을 끼워 넣는 것과 비슷합니다.

# extend() 메서드는 리스트에 다른 리스트나 순회 가능한(iterable) 항목들을 추가합니다. 여러 권의 책을 한 번에 서가에 추가하는 것과 같습니다. append()와 다르게 들어가는 값이 이터러블한 객체이기 때문에 각 요소를 개별적으로 추가합니다.

# 3단계 해설:
# # 첫 번째로 등장하는 "파이썬 기초" 제거
# books.remove("파이썬 기초")
# print("'파이썬 기초' 제거 후:", books)

# # 마지막 책을 빼내어 저장
# last_book = books.pop()
# print("빼낸 마지막 책:", last_book)
# print("책 빼낸 후:", books)

# # 알파벳 순으로 정렬
# books.sort()
# print("정렬 후:", books)

# # 역순으로 뒤집기
# books.reverse()
# print("역순 정렬 후:", books)


# remove() 메서드는 리스트에서 첫 번째로 발견되는 주어진 값을 삭제합니다. 도서관에서 특정 책을 찾아 제거하는 작업과 비슷합니다.

# pop() 메서드는 리스트의 특정 위치에 있는 값을 반환하고 해당 값을 리스트에서 삭제합니다. 인덱스를 지정하지 않으면 마지막에서 값을 뺍니다. 이는 도서관에서 책을 빌려주는 과정과 유사합니다 - 책을 서가에서 가져오고 누가 빌렸는지 기록합니다.

# sort() 메서드는 리스트 자체를 정렬합니다. 도서관에서 책을 알파벳 순으로 재배열하는 것과 같습니다.

# reverse() 메서드는 리스트의 항목들의 순서를 뒤집습니다. 책들을 Z에서 A 순으로 재배열하는 것과 비슷합니다.

# 4단계 해설:
# # 슬라이싱으로 처음 3권 선택
# top_books = books[:3]
# print("처음 3권:", top_books)

# # 2번째부터 5번째까지 역순으로 선택
# reversed_selection = books[1:5][::-1]
# print("2~5번째 책 역순:", reversed_selection)

# # 리스트 비우기
# books.clear()
# print("리스트 비운 후:", books)


# 슬라이싱은 [start:stop:step] 형태로 사용하며, step은 기본적으로 1이며 생략할 수 있습니다. 이는 도서관 서가에서 특정 구간의 책들을 선택하는 것과 같습니다.

# 다양한 형태의 슬라이싱이 사용가능합니다. 슬라이싱을 2번 또는 n번 사용하여 값을 반환하는 것도 가능합니다. 예시에서 books[1:5][::-1]는 먼저 2번째부터 5번째 책을 선택한 다음, 그 결과를 역순으로 배열합니다.

# clear()는 리스트의 모든 항목을 삭제합니다. 도서관의 모든 책을 한 번에 제거하는 것과 같습니다.

# tuple
# 리스트와 달리 튜플은 수정할 수 없다.(일반적인 생활이나, 요구사항 있을 때, 한번 선언하고 그 값이 변경되면 안될 때 쓴다.)
a = (1, 2, 3, 4)
# 예를 들어 생년월일. 변경되면 안됨
print(type(a))
# 안에 있는 데이터 읽는건 가능함. 수정은 안된다.
print(a[3])
# 인덱싱 기능 됨.
# 슬라이싱은 될까?
b = a[0:2]
print(b)
# 튜플 안에 튜플을 넣을 수 있다
# 튜플의 불변성 a[3] = "good"이거는 수정이 안된다!!
numbers = (3, 1, 4, 1, 5, 9, 2, 5, 3)
print(numbers.count(5))
print(numbers.index(5))
# 첫번째로 보이는 5만 반환함(제일 첫번째로 찾은거를 반환함)
#튜플의 제일 큰 특징 : 읽고 사용할 수만 있다.

bc = (1,[12,3,4])
bc[1][0] = "good"
print(bc[1])

